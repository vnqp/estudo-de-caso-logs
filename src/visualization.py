import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sentiment_analyzer import is_correct_prediction_limited

def clean_data_for_pie_chart(df, sentiment_class, theme_column, exclude_theme=None):
    cleaned_df = df.dropna(subset=[theme_column])
    sentiment_df = cleaned_df[cleaned_df["sentiment_class"] == sentiment_class]
    exploded_themes = sentiment_df[theme_column].explode()
    if exclude_theme:
        exploded_themes = exploded_themes[exploded_themes != exclude_theme]
    theme_counts = exploded_themes.value_counts()
    theme_counts = theme_counts[theme_counts > 0]
    return theme_counts

def display_visualizations(df, precision):  
    display_introduction()

    
    # Mostrar exemplos
    display_review_samples(df)

  

    # Mostrar distribui√ß√£o de sentimentos
    display_sentiment_distribution(df)
    display_percentages(df)
    
    # Mostrar cruzamento de sentimento vs nota
    display_sentiment_vs_rating(df)

    
    # Mostrar distribui√ß√£o de confian√ßa
    display_confidence_distribution(df)

    display_confidence_by_rating(df)

    display_sentiment_bubble_chart(df)
    
    # Mostrar temas
    display_theme_distributions(df)
    
   
    # Mostrar reviews negativas
    display_negative_reviews(df)
    
    # Mostrar sugest√µes


    display_precision_info(precision)

    display_model_performance_analysis(df)

def display_introduction():
    """Mostra a introdu√ß√£o do programa e explica seu prop√≥sito."""
    st.title("üìä An√°lise de Sentimento em Reviews de Produtos")
    
    st.markdown("""
    ## üëã Bem-vindo ao SAFE - Sentiment Analysis for Feedback Evaluation
    
    Este programa analisa e visualiza os sentimentos expressos em reviews de produtos com aux√≠lio da IA, 
    permitindo que voc√™ entenda rapidamente como os clientes se sentem, 
    sem precisar ler milhares de avalia√ß√µes individuais para que voc√™ possa gerar suas pr√≥prias conclus√µes sobre seu neg√≥cio.
    
    ### üéØ O que este programa faz:
    
    1. **Analisa o sentimento** das reviews (positivo, neutro ou negativo)
    2. **Identifica temas importantes** mencionados pelos clientes
    3. **Compara as notas (1-5)** com o sentimento detectado nas reviews
    4. **Avalia a confiabilidade** da an√°lise de sentimento
    5. **Sugere melhorias** com base na an√°lise
    
    ### üìà Quem pode usar este programa:
    
    - **Gerentes de Produto**: Para entender os pontos fortes e fracos de seus produtos
    - **Equipes de Marketing**: Para destacar os aspectos positivos em campanhas
    - **Suporte ao Cliente**: Para identificar problemas recorrentes
    - **Desenvolvedores**: Para priorizar melhorias de produto
    
    ### üöÄ Como usar:
    
    Basta carregar seus dados de reviews e navegar pelas diferentes visualiza√ß√µes para 
    obter insights imediatos sobre a opini√£o dos clientes. Cada se√ß√£o inclui uma 
    explica√ß√£o simples sobre como interpretar os resultados.
    
   ### üöÄ Exemplos:
    """)
    
    # Exemplos de reviews com diferentes caracter√≠sticas
    examples = [
        {
            "title": "Adorei este produto!",
            "text": "Comprei este produto h√° uma semana e estou impressionado com a qualidade. A bateria dura muito mais do que esperava e o design √© fant√°stico. Recomendo fortemente para quem est√° procurando um produto de alta qualidade.",
            "rating": 5,
            "sentiment": "Positivo",
            "sentiment_score": 0.87,
            "confidence_percent": 95,
            "observacoes": ["‚úÖ Nenhuma anomalia detectada"]
        },
        {
            "title": "Decepcionante",
            "text": "Produto chegou com defeito e o suporte ao cliente foi p√©ssimo. Demorei semanas para conseguir uma resposta e ainda tive que pagar pelo envio da devolu√ß√£o. N√£o recomendo esta empresa.",
            "rating": 1,
            "sentiment": "Negativo",
            "sentiment_score": -0.92,
            "confidence_percent": 97,
            "observacoes": ["‚úÖ Nenhuma anomalia detectada"]
        },
        {
            "title": "N√£o gostei, mas tem potencial",
            "text": "O produto tem boas ideias, mas a execu√ß√£o √© falha. Interface confusa e muitos bugs. Espero que as pr√≥ximas atualiza√ß√µes melhorem, pois o conceito √© interessante.",
            "rating": 2,
            "sentiment": "Positivo",
            "sentiment_score": 0.25,
            "confidence_percent": 38,
            "observacoes": ["‚ö†Ô∏è Confian√ßa baixa na classifica√ß√£o - Verifique se o texto condiz com a nota", 
                        "‚ùó Sentimento inesperado para essa nota"],
            "explanation": """
            <b>Por que este exemplo √© importante?</b>
            
            Esta review ilustra um caso de <b>poss√≠vel conflito entre nota e sentimento</b>. Com nota 2 (baixa), 
            seria esperado um sentimento negativo, mas o sistema detectou um sentimento positivo, embora com baixa confian√ßa (38%).
            
            <b>O que est√° acontecendo aqui?</b>
            
            1. A review cont√©m uma <b>mistura de elementos negativos</b> ("execu√ß√£o falha", "interface confusa", "muitos bugs") 
            que justificam a nota baixa.
            
            2. Mas tamb√©m inclui <b>express√µes positivas</b> ("boas ideias", "conceito interessante", "espero melhorias") 
            que podem ter levado o algoritmo a identificar um tom geral mais positivo.
            
            3. A <b>baixa confian√ßa</b> (38%) indica que o pr√≥prio sistema reconhece a ambiguidade nesta an√°lise.
            
            <b>Como interpretar casos semelhantes:</b>
            
            Quando voc√™ vir alertas como estes, vale a pena examinar manualmente as reviews para entender sutilezas 
            que o algoritmo pode ter perdido. Estes casos muitas vezes revelam <b>oportunidades de melhoria espec√≠ficas</b> 
            ou mostram clientes que est√£o insatisfeitos mas veem potencial no produto.
            """
        }
    ]
    
    st.subheader("üìö Exemplos de Reviews e Como S√£o Analisadas")
    
    for example in examples:
        st.markdown(f"**Nota {example['rating']} com Sentimento {example['sentiment']}**")
        st.markdown(f"üìå *{example['title']}*")
        st.markdown(f"üìù {example['text']}")
        st.markdown(f"üéØ Score de Sentimento: `{example['sentiment_score']}` ({example['confidence_percent']}% certeza)")
        for obs in example["observacoes"]:
            st.markdown(f"- {obs}")
        
        # Adiciona a explica√ß√£o quando dispon√≠vel
        if "explanation" in example:
            with st.expander("üß† Entenda esta an√°lise"):
                st.markdown(example["explanation"], unsafe_allow_html=True)


def display_precision_info(precision):
    st.markdown("---")
    
    # Determinar a classifica√ß√£o da precis√£o e selecionar o emoji apropriado
    if precision >= 0.8:
        precision_level = "Excelente"
        emoji = "üéØ"
        color = "green"
    elif precision >= 0.7:
        precision_level = "Boa"
        emoji = "üëç"
        color = "darkgreen"
    elif precision >= 0.6:
        precision_level = "Aceit√°vel"
        emoji = "‚ö†Ô∏è"
        color = "orange"
    else:
        precision_level = "Precisa melhorar"
        emoji = "‚ùó"
        color = "red"
    
    # Mostrar a precis√£o com formata√ß√£o destacada
    st.markdown(f"""
    <h2 style='text-align: center;'>{emoji} Precis√£o Crua do Modelo</h2>
    <h1 style='text-align: center; color: {color};'>{precision*100:.1f}%</h1>
    <p style='text-align: center;'>Classifica√ß√£o: <strong>{precision_level}</strong></p>
    """, unsafe_allow_html=True)
    
    # Criar uma barra de progresso visual para a precis√£o
    st.progress(precision)
    
    # Explica√ß√£o em um expander
    with st.expander("üìå O que significa esta precis√£o?"):
        st.markdown("""
        ### O que √© a precis√£o crua do modelo?
        
        √â uma medida de **quanto nosso modelo acerta** ao analisar o sentimento das reviews.
        
        ### Como calculamos a precis√£o:
        
        Comparamos as notas que os clientes deram (1-5 estrelas) com o sentimento que o modelo detectou:
        
        - **Nota 5** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚Üí Deveria ser sentimento **Positivo**
        - **Nota 4** ‚≠ê‚≠ê‚≠ê‚≠ê ‚Üí Deveria ser **Positivo** ou **Neutro**
        - **Nota 3** ‚≠ê‚≠ê‚≠ê ‚Üí Pode ser qualquer sentimento
        - **Nota 2** ‚≠ê‚≠ê ‚Üí Deveria ser **Negativo** ou **Neutro**
        - **Nota 1** ‚≠ê ‚Üí Deveria ser sentimento **Negativo**
        
        ### Como interpretar este n√∫mero:
        
        | Precis√£o | O que significa | Recomenda√ß√£o |
        |----------|-----------------|--------------|
        | 80-100% | Excelente | Pode confiar nos resultados para decis√µes importantes |
        | 70-80% | Boa | Confi√°vel para a maioria das an√°lises |
        | 60-70% | Aceit√°vel | Use para tend√™ncias gerais, mas confira manualmente casos cr√≠ticos |
        | Abaixo de 60% | Precisa melhorar | Use com cautela, verifique manualmente as conclus√µes |
        
        ### Por que a precis√£o pode n√£o ser perfeita?
        
        - Algumas reviews cont√™m **sarcasmo ou ironia** que √© dif√≠cil para o modelo detectar
        - Clientes podem dar **notas que n√£o correspondem** ao texto da review
        - Reviews com **opini√µes mistas** (parte positivas, parte negativas) s√£o dif√≠ceis de classificar
        """)
    
    # Mostrar uma dica visual com base na precis√£o
    if precision < 0.7:
        st.warning("""
        ‚ö†Ô∏è **Dica**: Como a precis√£o est√° abaixo de 70%, recomendamos usar estes resultados como indicativos, 
        mas verificar manualmente as principais conclus√µes antes de tomar decis√µes importantes.
        """)
    
    st.markdown("---")

def display_sentiment_distribution(df):
    st.subheader("üåü Distribui√ß√£o por Nota (class_index)")
    class_counts = df["class_index"].value_counts().sort_index()
    st.bar_chart(class_counts)

    st.markdown("---")
    st.subheader("üìä Distribui√ß√£o de Sentimentos")
    st.bar_chart(df["sentiment_class"].value_counts())

    class_counts = df["class_index"].value_counts().sort_index()
    st.subheader("ü•ß Distribui√ß√£o Percentual das Notas")
    class_percent = class_counts / class_counts.sum() * 100
    fig_pie, ax_pie = plt.subplots()
    ax_pie.pie(class_percent, labels=class_percent.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette("pastel"))
    ax_pie.set_title("Distribui√ß√£o das Notas (em %)")
    ax_pie.axis('equal')
    st.pyplot(fig_pie)

    # Exibir explica√ß√£o sobre as distribui√ß√µes usando expander
    with st.expander("üìå Entenda estes gr√°ficos"):
        st.markdown("""
        ### O que estes gr√°ficos mostram?
        
        **Gr√°fico 1 - Distribui√ß√£o de Sentimentos:**
        - Mostra quantas reviews s√£o positivas, neutras ou negativas
        - Ajuda a entender o humor geral dos clientes sobre seu produto
        
        **Gr√°fico 2 - Distribui√ß√£o por Nota:**
        - Exibe quantas reviews deram cada nota (de 1 a 5 estrelas)
        - Quanto mais reviews com notas altas (4-5), melhor a recep√ß√£o do produto
        
        **Gr√°fico 3 - Distribui√ß√£o Percentual:**
        - Apresenta as mesmas informa√ß√µes do gr√°fico anterior, mas em porcentagem
        - Facilita ver rapidamente qual propor√ß√£o das reviews √© positiva ou negativa
        
        ### Como usar esta informa√ß√£o:
        
        - Muitas notas baixas (1-2): Seu produto pode precisar de melhorias urgentes
        - Maioria de notas m√©dias (3): Os clientes est√£o satisfeitos, mas n√£o impressionados
        - Predomin√¢ncia de notas altas (4-5): Seu produto est√° agradando - destaque estes pontos!
        
        Se o sentimento n√£o corresponder √†s notas (ex: muitas notas 5 mas sentimento neutro), 
        vale investigar o texto das reviews para entender melhor.
        """)
    st.markdown("---")

def display_sentiment_vs_rating(df):
    st.subheader("üîÑ Cruzamento: Sentimento vs Nota")
    cross_tab = pd.crosstab(df["class_index"], df["sentiment_class"])
    st.dataframe(cross_tab)

    st.subheader("üìà Heatmap: Sentimento vs Nota")
    fig, ax = plt.subplots()
    sns.heatmap(cross_tab, annot=True, fmt="d", cmap="YlOrBr", ax=ax)
    ax.set_title("Distribui√ß√£o entre Notas e Sentimentos")
    st.pyplot(fig)

    # Explica√ß√£o dentro de um expander com texto simplificado
    with st.expander("üìå Como interpretar estes dados"):
        st.markdown("""
        ### O que estes gr√°ficos mostram?
        
        Estes gr√°ficos mostram **como as notas e os sentimentos se relacionam** nas reviews.
        
        **Tabela de Cruzamento:** 
        - Cada linha representa uma nota (1 a 5 estrelas)
        - Cada coluna mostra um sentimento (Positivo, Neutro, Negativo)
        - Os n√∫meros mostram quantas reviews existem em cada combina√ß√£o
        
        **Heatmap (mapa de calor):**
        - Mesma informa√ß√£o da tabela, mas em formato visual
        - Cores mais escuras = mais reviews naquela combina√ß√£o
        - N√∫meros em cada quadrado = quantidade exata de reviews
        
        ### O que seria o esperado?
        
        **Normalmente esperamos ver:**
        - Notas 4-5 ‚≠ê com sentimento Positivo
        - Notas 3 ‚≠ê com sentimento Neutro
        - Notas 1-2 ‚≠ê com sentimento Negativo
        
        ### O que investigar:
        
        **Procure por padr√µes inesperados:**
        - Notas altas (4-5) com sentimentos negativos ‚Üí cliente pode ter dado nota errada ou o texto contradiz a nota
        - Notas baixas (1-2) com sentimentos positivos ‚Üí poss√≠vel ironia ou sarcasmo n√£o detectado
        - Muitas reviews neutras ‚Üí podem indicar clientes indecisos ou reviews pouco informativas
        
        Use estas informa√ß√µes para identificar reviews que merecem aten√ß√£o especial, como clientes que parecem insatisfeitos mesmo dando notas altas.
        """)
    st.markdown("---")


def display_confidence_distribution(df):
    st.subheader("üìè Distribui√ß√£o de Reviews por Faixa de Confian√ßa na Analise Sentimental")

    # Definir faixas de confian√ßa
    bins = [0, 20, 40, 60, 80, 100]
    labels = ["0-20%", "21-40%", "41-60%", "61-80%", "81-100%"]
    df["confidence_range"] = pd.cut(df["confidence_percent"], bins=bins, labels=labels, include_lowest=True)
    
    # Contagem por faixa
    confidence_counts = df["confidence_range"].value_counts().sort_index()

    # Plot
    fig_conf, ax_conf = plt.subplots()
    sns.barplot(x=confidence_counts.index, y=confidence_counts.values, palette="Blues_d", ax=ax_conf)
    ax_conf.set_title("Quantidade de Reviews por Faixa de Confian√ßa (%)")
    ax_conf.set_xlabel("Faixa de Confian√ßa")
    ax_conf.set_ylabel("N√∫mero de Reviews")
    st.pyplot(fig_conf)

    # Histograma da confian√ßa
    st.subheader("üìä Histograma da Confian√ßa da An√°lise de Sentimento")
    fig_hist, ax_hist = plt.subplots()
    sns.histplot(df["confidence_percent"], bins=20, kde=True, color="skyblue", ax=ax_hist)
    ax_hist.set_title("Distribui√ß√£o de Confian√ßa (Score de Sentimento)")
    ax_hist.set_xlabel("Confian√ßa (%)")
    ax_hist.set_ylabel("N√∫mero de Reviews")
    st.pyplot(fig_hist)

    # Boxplot de confian√ßa por classe
    st.subheader("üì¶ Boxplot: Confian√ßa por Classe de Sentimento")
    fig_box, ax_box = plt.subplots()
    sns.boxplot(x="sentiment_class", y="confidence_percent", data=df, palette="Set2", ax=ax_box)
    ax_box.set_title("Varia√ß√£o da Confian√ßa por Sentimento")
    ax_box.set_xlabel("Classe de Sentimento")
    ax_box.set_ylabel("Confian√ßa (%)")
    st.pyplot(fig_box)
   

def display_confidence_by_rating(df):
    st.subheader("üéØ Confiabilidade da An√°lise por Nota")
    
    # Criando o gr√°fico
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Boxplot da confian√ßa por nota
    sns.boxplot(x='class_index', y='confidence_percent', data=df, ax=ax)
    
    # Adicionando pontos individuais
    sns.stripplot(x='class_index', y='confidence_percent', data=df, 
                 size=4, color='.3', alpha=0.3, ax=ax)
    
    ax.set_title("Confiabilidade da An√°lise por Nota")
    ax.set_xlabel("Nota (1-5)")
    ax.set_ylabel("Confian√ßa na An√°lise (%)")
    
    # Adicionar linha m√©dia
    overall_mean = df['confidence_percent'].mean()
    ax.axhline(y=overall_mean, color='r', linestyle='--', label=f'M√©dia Geral: {overall_mean:.1f}%')
    ax.legend()
    
    st.pyplot(fig)
    
    # Estat√≠sticas resumidas
    st.markdown("### üìä Estat√≠sticas de Confiabilidade por Nota")
    confidence_stats = df.groupby('class_index')['confidence_percent'].agg(['mean', 'median', 'std', 'min', 'max'])
    confidence_stats.columns = ['M√©dia', 'Mediana', 'Desvio Padr√£o', 'M√≠nimo', 'M√°ximo']
    confidence_stats = confidence_stats.round(2)
    st.dataframe(confidence_stats)

    # Explica√ß√£o em um expander
    with st.expander("üìå Entenda a confiabilidade da an√°lise"):
        st.markdown("""
        ### O que √© a confiabilidade?
        
        √â o quanto a IA est√° **segura** sobre a classifica√ß√£o do sentimento de uma review.
        
        - **Confian√ßa alta (pr√≥xima de 100%)** = A IA est√° bem certa do sentimento
        - **Confian√ßa baixa (pr√≥xima de 0%)** = A IA est√° em d√∫vida sobre o sentimento
        
        ### Como ler este gr√°fico?
        
        **Boxplot (caixas coloridas):**
        - A linha no meio da caixa = valor t√≠pico (mediana) de confian√ßa
        - Caixa inteira = onde est√° a maioria das reviews
        - Pontos cinza = reviews individuais
        - Linha vermelha tracejada = m√©dia geral de confian√ßa
        
        ### O que procurar neste gr√°fico?
        
        **Padr√µes importantes:**
        
        1. **Caixas altas (acima de 70%)** = Bom! As reviews t√™m sentimento claro
        
        2. **Caixas baixas (abaixo de 50%)** = Reviews com linguagem amb√≠gua ou confusa
        
        3. **Muitos pontos espalhados** = Reviews muito variadas em clareza
        
        4. **Diferen√ßas entre notas:**
           - Confian√ßa maior nas notas 1 e 5? Normal! Opini√µes extremas s√£o mais claras
           - Confian√ßa menor na nota 3? Normal! Opini√µes neutras costumam ser mais amb√≠guas
        
        ### Dica pr√°tica:
        
        Se a confian√ßa for baixa em muitas reviews de uma nota espec√≠fica, vale a pena ler essas reviews 
        manualmente. Pode haver nuances que a IA n√£o conseguiu captar completamente.
        """)
    st.markdown("---")

def display_sentiment_bubble_chart(df):
    st.subheader("üîÆ Mapa de Sentimento (Confian√ßa √ó Nota √ó Volume)")
    
    # Agrupar dados
    grouped = df.groupby(['class_index', 'sentiment_class']).agg(
        count=('sentiment_class', 'count'),
        avg_confidence=('confidence_percent', 'mean')
    ).reset_index()
    
    # Criar gr√°fico de bolhas
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Definir cores por sentimento
    colors = {'Positivo': 'green', 'Neutro': 'blue', 'Negativo': 'red'}
    
    # Plotar bolhas
    for sentiment in grouped['sentiment_class'].unique():
        subset = grouped[grouped['sentiment_class'] == sentiment]
        scatter = ax.scatter(
            subset['class_index'], 
            subset['avg_confidence'],
            s=subset['count']*20,  # Tamanho proporcional √† contagem
            alpha=0.6,
            color=colors[sentiment],
            label=sentiment
        )
    
    # Adicionar textos
    for _, row in grouped.iterrows():
        ax.annotate(
            f"{row['count']}",
            (row['class_index'], row['avg_confidence']),
            ha='center', va='center',
            fontsize=9
        )
    
    ax.set_title("Mapa de Sentimento: Nota vs Confian√ßa vs Volume")
    ax.set_xlabel("Nota")
    ax.set_ylabel("Confian√ßa M√©dia (%)")
    ax.set_xticks([1, 2, 3, 4, 5])
    ax.legend(title="Sentimento")
    ax.grid(True, alpha=0.3)
    
    st.pyplot(fig)
    
    # Explica√ß√£o em um expander com linguagem simplificada
    with st.expander("üìå Como entender este gr√°fico de bolhas"):
        st.markdown("""
        ### O que este gr√°fico mostra?
        
        Este √© um gr√°fico "3 em 1" que mostra tr√™s informa√ß√µes importantes de uma s√≥ vez:
        
        1. **Posi√ß√£o horizontal (Nota)**: A nota que o cliente deu, de 1 a 5 estrelas
        
        2. **Posi√ß√£o vertical (Confian√ßa)**: O quanto a IA est√° segura sobre o sentimento detectado
        
        3. **Tamanho da bolha (Volume)**: Quantas reviews existem com essa combina√ß√£o
        
        **As cores representam o sentimento:**
        - üü¢ **Verde** = Sentimento Positivo
        - üîµ **Azul** = Sentimento Neutro
        - üî¥ **Vermelho** = Sentimento Negativo
        
        ### O que indica um bom resultado?
        
        Um padr√£o "saud√°vel" normalmente mostra:
        
        - üî¥ **Bolhas vermelhas** (negativas) maiores nas **notas baixas** (1-2)
        - üîµ **Bolhas azuis** (neutras) maiores na **nota m√©dia** (3)
        - üü¢ **Bolhas verdes** (positivas) maiores nas **notas altas** (4-5)
        - Bolhas posicionadas **mais alto** no gr√°fico (indicando maior confian√ßa)
        
        ### O que procurar de estranho?
        
        Fique atento a estas situa√ß√µes incomuns:
        
        - üü¢ **Bolhas verdes** nas **notas 1-2**: Clientes podem estar sendo sarc√°sticos ou o modelo pode estar confuso
        
        - üî¥ **Bolhas vermelhas** nas **notas 4-5**: Pode indicar clientes que deram nota boa mas fizeram cr√≠ticas no texto
        
        - **Bolhas muito baixas** no gr√°fico: Reviews com linguagem amb√≠gua ou confusa
        
        - **Muitas bolhas azuis** (neutras): Pode indicar reviews com pouco conte√∫do emocional ou opini√µes mistas
        
        ### Dica de uso:
        
        Quando encontrar combina√ß√µes inesperadas (como sentimento positivo em nota baixa), vale a pena examinar 
        manualmente algumas dessas reviews para entender melhor o que est√° acontecendo.
        """)
    st.markdown("---")

def display_theme_distributions(df):
    st.subheader("üçï Gr√°fico de Pizza - Temas em Reviews Negativas")
    negative_theme_counts = clean_data_for_pie_chart(df, "Negativo", "themes")
    if not negative_theme_counts.empty:
        # Gr√°fico
        fig, ax = plt.subplots()
        ax.pie(
            negative_theme_counts,
            labels=negative_theme_counts.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=sns.color_palette("RdBu", len(negative_theme_counts))
        )
        ax.set_title("Distribui√ß√£o dos Temas em Reviews Negativas")
        ax.axis('equal')
        st.pyplot(fig)
    else:
        st.info("Nenhum tema negativo encontrado.")

    st.subheader("üç∞ Gr√°fico de Pizza - Temas em Reviews Positivas")
    positive_theme_counts = clean_data_for_pie_chart(df, "Positivo", "positive_themes")
    if not positive_theme_counts.empty:
        # Gr√°fico
        fig2, ax2 = plt.subplots()
        ax2.pie(
            positive_theme_counts,
            labels=positive_theme_counts.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=sns.color_palette("YlGn", len(positive_theme_counts))
        )
        ax2.set_title("Distribui√ß√£o dos Temas em Reviews Positivas")
        ax2.axis('equal')
        st.pyplot(fig2)
    else:
        st.info("Nenhum tema positivo encontrado.")

    # Explica√ß√£o em um expander

    with st.expander("üìå Entenda os gr√°ficos de temas"):

        st.markdown("""

        ### O que s√£o estes gr√°ficos de temas?

        

        Estes gr√°ficos mostram os **assuntos mais comentados** pelos clientes, separados entre:

        

        - **Reviews negativas**: O que os clientes n√£o gostaram

        - **Reviews positivas**: O que os clientes elogiaram

        

        ### Como isso ajuda seu neg√≥cio:

        

        - **Gr√°ficos de pizza**: Mostram a propor√ß√£o de cada tema (quanto maior a fatia, mais comentado)

        - **Tabelas**: Apresentam os n√∫meros exatos de ocorr√™ncias de cada tema

        

        ### Como usar esta informa√ß√£o:

        

        ‚úÖ **Nos temas negativos**: Concentre esfor√ßos para resolver os problemas mais mencionados

        

        ‚úÖ **Nos temas positivos**: Destaque estes pontos fortes em seu marketing

        

        Por exemplo, se "entrega" for um tema negativo comum, melhore sua log√≠stica. 

        Se "qualidade" aparecer muito nos positivos, enfatize isso nas campanhas.

        """)

    

    col1, col2 = st.columns(2)

    

    with col1:

        st.subheader("üî¥ Temas em Reviews Negativas")
        # Tabela

        st.markdown("##### Detalhamento dos temas negativos:")

        st.dataframe(

            negative_theme_counts.reset_index().rename(

                columns={"index": "Problema", 0: "Ocorr√™ncias"}

            )

        )

            

            # Adicionar significado para os temas negativos

        with st.expander("üîç O que significam estes temas negativos?"):

            st.markdown("""

            - **Qualidade**: Produtos quebrados, mal feitos ou defeituosos

            - **Entrega**: Atrasos, produtos danificados durante transporte, entregas erradas

            - **Atendimento**: Problemas com suporte, dificuldade em resolver quest√µes

            - **Pre√ßo**: Reclama√ß√µes sobre custo-benef√≠cio ou pre√ßo alto demais

            - **Expectativa**: Produto diferente do anunciado ou esperado

            - **Usabilidade**: Dificuldade para usar, problemas de instala√ß√£o

            - **Funcionamento**: Produtos que n√£o funcionam como deveriam

            - **Durabilidade**: Produtos que quebraram ou estragaram rapidamente

            """)




    with col2:

        st.subheader("üü¢ Temas em Reviews Positivas")

        st.markdown("##### Detalhamento dos temas positivos:")

        st.dataframe(

            positive_theme_counts.reset_index().rename(

                columns={"index": "Ponto forte", 0: "Ocorr√™ncias"}

            )

        )

            

        # Adicionar significado para os temas positivos

        with st.expander("üîç O que significam estes temas positivos?"):

            st.markdown("""

            - **Qualidade**: Produtos bem feitos, bons materiais, boa constru√ß√£o

            - **Entrega**: Rapidez, cuidado no transporte, entrega antes do prazo

            - **Atendimento**: Suporte atencioso, respostas r√°pidas, resolu√ß√£o eficaz

            - **Pre√ßo**: Bom custo-benef√≠cio, promo√ß√µes vantajosas

            - **Expectativa**: Produto superou o esperado, cliente positivamente surpreso

            - **Facilidade**: Produto f√°cil de usar, intuitivo, boa experi√™ncia

            - **Funcionamento**: Produto funciona perfeitamente como anunciado

            - **Durabilidade**: Produto resistente, mant√©m qualidade ao longo do tempo

            - **Desempenho**: Efici√™ncia, bons resultados, alta performance

            """)

    

    # Dicas de a√ß√£o baseadas nos temas

    st.subheader("üí° Insights e Recomenda√ß√µes")

    with st.expander("Ver sugest√µes de a√ß√£o baseadas nos temas"):

        st.markdown("""

        ### Como agir com base nestes temas:

        

        #### Temas Negativos Frequentes:

        

        1. **Se "Qualidade" for um problema comum:**

           - Revisar processos de fabrica√ß√£o/fornecimento

           - Implementar testes de qualidade mais rigorosos

           - Considerar mudan√ßa de fornecedores

        

        2. **Se "Entrega" for muito mencionado:**

           - Avaliar parceiros log√≠sticos

           - Melhorar embalagens para evitar danos

           - Revisar processos de envio e rastreamento

        

        3. **Se "Pre√ßo" aparecer frequentemente:**

           - Reavaliar estrat√©gia de pre√ßos

           - Destacar melhor o valor agregado do produto

           - Considerar op√ß√µes com melhor custo-benef√≠cio

        

        #### Temas Positivos a Destacar:

        

        1. **Se "Qualidade" for elogiada:**

           - Destacar isso em campanhas de marketing

           - Manter os padr√µes atuais de produ√ß√£o

           - Considerar linha premium ressaltando este aspecto

        

        2. **Se "Atendimento" for bem avaliado:**

           - Reconhecer e premiar a equipe de suporte

           - Compartilhar as boas pr√°ticas internamente

           - Destacar o suporte como diferencial competitivo

        

        3. **Se "Facilidade" for mencionada positivamente:**

           - Enfatizar a usabilidade em materiais promocionais

           - Manter a simplicidade em atualiza√ß√µes futuras do produto

           - Considerar tutoriais para outras funcionalidades menos utilizadas

        """)

    

    st.markdown("---")

def display_review_samples(df):
    st.subheader("üìö Samples por Combina√ß√£o (Nota √ó Sentimento)")
    
    # Adiciona explica√ß√£o em um expander
    with st.expander("üìå Entenda esta se√ß√£o"):
        st.markdown("""
        ### O que s√£o estas amostras?
        
        Aqui voc√™ encontra **exemplos reais de reviews** para cada combina√ß√£o de nota e sentimento.
        
        - Cada expander mostra uma review diferente
        - As reviews s√£o escolhidas aleatoriamente do seu conjunto de dados
        - Os alertas (‚ö†Ô∏è‚ùó) indicam poss√≠veis inconsist√™ncias na an√°lise
        
        ### Como usar estas amostras:
        
        - Revise exemplos com alertas para entender melhor as opini√µes dos clientes
        - Use para verificar se a an√°lise de sentimento est√° funcionando corretamente
        - Identifique padr√µes de linguagem nos coment√°rios positivos e negativos
        """)

    sample_dict = {}

    # Heur√≠stica 1: Faixa flex√≠vel para correspond√™ncia nota √ó sentimento
    def is_sentiment_reasonable(rating, sentiment):
        if rating == 5:
            return sentiment in ["Positivo", "Neutro"]
        elif rating == 4:
            return sentiment in ["Positivo", "Neutro"]
        elif rating == 3:
            return True  # zona cinzenta
        elif rating == 2:
            return sentiment in ["Negativo", "Neutro"]
        elif rating == 1:
            return sentiment in ["Negativo", "Neutro"]
        return False

    # Heur√≠stica 2: Confian√ßa baixa
    def is_low_confidence(confidence_percent):
        return confidence_percent < 30

    # Heur√≠stica 3: Discrep√¢ncia entre nota e score de sentimento
    def has_discrepancy(rating, sentiment_score):
        if rating == 5 and sentiment_score < 0:
            return True
        elif rating == 1 and sentiment_score > 0:
            return True
        return False

    for rating in sorted(df["class_index"].unique()):
        for sentiment in ["Positivo", "Neutro", "Negativo"]:
            subset = df[(df["class_index"] == rating) & (df["sentiment_class"] == sentiment)]
            if not subset.empty:
                example = subset.sample(1).iloc[0]

                sentiment_score = example["sentiment_score"]
                confidence = example["confidence_percent"]

                observacoes = []

                if is_low_confidence(confidence):
                    observacoes.append("‚ö†Ô∏è Confian√ßa baixa na classifica√ß√£o - Verifique se o texto condiz com a nota")
                if not is_sentiment_reasonable(rating, sentiment):
                    observacoes.append("‚ùó Sentimento inesperado para essa nota")
                if has_discrepancy(rating, sentiment_score):
                    observacoes.append("‚ùó Score de sentimento diverge da nota")

                if not observacoes:
                    observacoes.append("‚úÖ Nenhuma anomalia detectada")

                sample_dict[(rating, sentiment)] = {
                    "title": example["review_title"],
                    "text": example["review_text"][:300] + ("..." if len(example["review_text"]) > 300 else ""),
                    "sentiment_score": sentiment_score,
                    "confidence_percent": confidence,
                    "observacoes": observacoes
                }

    # Cria containers para organizar os expanders em colunas
    col1, col2, col3 = st.columns(3)
    columns = [col1, col2, col3]
    col_idx = 0

    # Ordenar as chaves para uma apresenta√ß√£o mais organizada
    sorted_keys = sorted(sample_dict.keys())

    for key in sorted_keys:
        value = sample_dict[key]

        # Determina os √≠cones baseados nas observa√ß√µes
        icons = set()
        for obs in value["observacoes"]:
            if "‚úÖ" in obs:
                icons.add("‚úÖ")
            if "‚ö†Ô∏è" in obs:
                icons.add("‚ö†Ô∏è")
            if "‚ùó" in obs:
                icons.add("‚ùó")
        icon = "".join(sorted(icons, key=lambda x: ["‚ùó", "‚ö†Ô∏è", "‚úÖ"].index(x)))

        # Escolhe a coluna atual
        col = columns[col_idx]

        # Cria o expander para esta amostra
        with col.expander(f"{icon} Nota {key[0]} - {key[1]}"):
            st.markdown(f"**{value['title']}**")
            st.markdown(f"{value['text']}")
            st.markdown(f"üéØ Score: `{value['sentiment_score']}` ({value['confidence_percent']}% certeza)")

            for obs in value["observacoes"]:
                if "‚úÖ" in obs:
                    st.success(obs)
                elif "‚ö†Ô∏è" in obs:
                    st.warning(obs)
                elif "‚ùó" in obs:
                    st.error(obs)

        col_idx = (col_idx + 1) % len(columns)

    st.markdown("---")



def display_negative_reviews(df):
    st.subheader("üö® Reviews Negativas Detectadas")
    negative_df = df[df["sentiment_class"] == "Negativo"]
    if negative_df.empty:
        st.info("Nenhuma review negativa encontrada.")
    else:
        st.write(f"Total: {len(negative_df)} de {len(df)} reviews ({(len(negative_df)/len(df))*100:.2f}%)")
        st.dataframe(negative_df[["review_title", "review_text", "class_index"]], use_container_width=True)

    st.markdown("---")

    # Calculando a porcentagem de reviews positivas e negativas
    positive_percentage = (df["sentiment_class"] == "Positivo").mean() * 100
    negative_percentage = (df["sentiment_class"] == "Negativo").mean() * 100

def display_percentages(df):
    # Calcular porcentagens
    sentiment_counts = df['sentiment_class'].value_counts()
    total_reviews = len(df)
    
    # Garantir que existem as categorias (se n√£o existirem, definir como 0)
    positive_count = sentiment_counts.get('Positivo', 0)
    negative_count = sentiment_counts.get('Negativo', 0)
    neutral_count = sentiment_counts.get('Neutro', 0)
    
    # Calcular porcentagens
    positive_percentage = (positive_count / total_reviews) * 100
    negative_percentage = (negative_count / total_reviews) * 100
    neutral_percentage = (neutral_count / total_reviews) * 100
    
    # Criar medidor visual com cores
    st.subheader("üìä Vis√£o Geral do Sentimento")
    
    # Usar colunas para organizar o layout
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"### üòÉ Positivas")
        st.markdown(f"<h1 style='text-align: center; color: green;'>{positive_percentage:.1f}%</h1>", unsafe_allow_html=True)
        st.markdown(f"({positive_count} reviews)")
    
    with col2:
        st.markdown(f"### üòê Neutras")
        st.markdown(f"<h1 style='text-align: center; color: gray;'>{neutral_percentage:.1f}%</h1>", unsafe_allow_html=True)
        st.markdown(f"({neutral_count} reviews)")
    
    with col3:
        st.markdown(f"### üòü Negativas")
        st.markdown(f"<h1 style='text-align: center; color: red;'>{negative_percentage:.1f}%</h1>", unsafe_allow_html=True)
        st.markdown(f"({negative_count} reviews)")
    
    # Criar um medidor visual simples
    progress_data = [
        {"label": "Positivas", "value": positive_percentage, "color": "green"},
        {"label": "Neutras", "value": neutral_percentage, "color": "gray"},
        {"label": "Negativas", "value": negative_percentage, "color": "red"}
    ]
    
    # Criar uma barra horizontal para visualizar a distribui√ß√£o
    st.markdown("#### Distribui√ß√£o de Sentimentos:")
    
    # Montar o HTML para a barra de progresso
    progress_html = '<div style="display: flex; width: 100%; height: 30px; border-radius: 5px; overflow: hidden;">'
    for item in progress_data:
        if item["value"] > 0:  # S√≥ mostrar se tiver valor
            progress_html += f'<div style="width: {item["value"]}%; background-color: {item["color"]};" title="{item["label"]}: {item["value"]:.1f}%"></div>'
    progress_html += '</div>'
    
    st.markdown(progress_html, unsafe_allow_html=True)
    
    # Adicionar explica√ß√£o em um expander
    with st.expander("üìå Como interpretar estes n√∫meros"):
        st.markdown("""
        ### O que significam estas porcentagens?
        
        Estes n√∫meros mostram como os clientes se sentem em rela√ß√£o ao seu produto ou servi√ßo:
        
        - **Porcentagem Positiva**: Clientes satisfeitos que expressaram opini√µes favor√°veis
        - **Porcentagem Neutra**: Clientes com opini√µes mistas ou que n√£o expressaram emo√ß√µes fortes
        - **Porcentagem Negativa**: Clientes insatisfeitos que expressaram cr√≠ticas ou problemas
        
        ### Como avaliar estes resultados?
        
        **Cen√°rio ideal:**
        - 70%+ positivas
        - Menos de 15% negativas
        
        **Situa√ß√£o aceit√°vel:**
        - 50-70% positivas
        - 15-30% negativas
        
        **Requer aten√ß√£o:**
        - Menos de 50% positivas
        - Mais de 30% negativas
        
        ### Dica de uso:
        
        Se a porcentagem de reviews negativas for alta, explore os temas negativos mais frequentes 
        para identificar os principais problemas a serem resolvidos prioritariamente.
        """)
    
    st.markdown("---")

def display_model_performance_analysis(df):
    st.subheader("üîç An√°lise de Precis√£o Avan√ßada do Modelo")
    
    # Explica√ß√£o simplificada em um expander
    with st.expander("üìå Entenda esta se√ß√£o"):
        st.markdown("""
        ### O que esta an√°lise avan√ßada mostra?
        
        Esta se√ß√£o avalia o quanto o modelo de IA est√° **acertando na detec√ß√£o de sentimentos**, comparando com uma previs√£o do que seria esperado com base nas notas dos clientes.
        
        **Como interpretamos as notas para esta compara√ß√£o:**
        - Notas 5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = Esperamos sentimento Positivo
        - Notas 1 ‚≠ê = Esperamos sentimento Negativo
        - Notas 2-4 ‚≠ê‚≠ê-‚≠ê‚≠ê‚≠ê‚≠ê = Podem variar (consideramos principalmente 1 e 5 para esta an√°lise)
        
        ### Como ler a Matriz de Confus√£o:
        
        A matriz mostra como o modelo **classificou** vs. como **deveria ter classificado**:
        
        - **Diagonal principal** (canto superior esquerdo ao inferior direito): Representa os **acertos** do modelo
        - **Fora da diagonal**: Representa os **erros** de classifica√ß√£o
        - N√∫mero em cada c√©lula = quantidade de reviews naquela combina√ß√£o
        
        ### O que significam as m√©tricas abaixo:
        
        **Precision (Precis√£o)**: Quando o modelo diz que √© positivo/negativo, qual % est√° correto?
        
        **Recall (Revoca√ß√£o)**: Do total de sentimentos realmente positivos/negativos, qual % o modelo conseguiu identificar?
        
        **F1 Score**: Uma m√©dia balanceada entre Precision e Recall (quanto maior, melhor)
        
        **Valores bons**: Acima de 70% indicam um modelo confi√°vel para an√°lises de neg√≥cio
        """)
    
    from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
    
    # Criar categoriza√ß√£o baseada na nota (class_index)
    df['expected_sentiment'] = df['class_index'].apply(lambda x: 
                                                      'Positivo' if x == 5 else 
                                                      'Negativo' if x == 1 else 
                                                      'Neutro')  # Tratando 2 e 4 como Neutro
    
    # Filtrar somente os casos com notas v√°lidas
    clear_df = df[df['class_index'].isin([1, 2, 4, 5])]

    # Matriz de Confus√£o com cores mais intuitivas
    cm = confusion_matrix(
        clear_df['expected_sentiment'], 
        clear_df['sentiment_class'],
        labels=['Positivo', 'Neutro', 'Negativo']
    )
    
    # Criar visualiza√ß√£o mais clara da matriz
    fig, ax = plt.subplots(figsize=(8, 6))
    
    # Calcular porcentagens por linha
    row_sums = cm.sum(axis=1)
    cm_percent = np.zeros_like(cm, dtype=float)
    for i in range(len(row_sums)):
        if row_sums[i] > 0:
            cm_percent[i] = cm[i] / row_sums[i] * 100
    
    # Plotar heatmap com valores absolutos
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                xticklabels=['Positivo', 'Neutro', 'Negativo'],
                yticklabels=['Positivo', 'Neutro', 'Negativo'],
                linewidths=1, linecolor='white', ax=ax)
    
    # Adicionar porcentagens
    for i in range(len(cm)):
        for j in range(len(cm)):
            if cm[i, j] > 0:
                ax.text(j + 0.5, i + 0.7, f"({cm_percent[i, j]:.1f}%)", 
                        ha="center", va="center", color="black", fontsize=9)
    
    ax.set_title('Matriz de Confus√£o: Esperado vs. Detectado', fontsize=14)
    ax.set_xlabel('Sentimento Detectado pelo Modelo', fontsize=12)
    ax.set_ylabel('Sentimento Esperado pela Nota', fontsize=12)
    st.pyplot(fig)
    
    # Preparar dados bin√°rios para an√°lise separada
    binary_df = clear_df[clear_df['expected_sentiment'].isin(['Positivo', 'Negativo'])].copy()

    # M√©tricas com Positivo como classe positiva
    y_true_pos = binary_df['expected_sentiment'].map({'Positivo': 1, 'Negativo': 0})
    y_pred_pos = binary_df['sentiment_class'].map({'Positivo': 1, 'Negativo': 0, 'Neutro': 0}).astype(int)

    precision_pos = precision_score(y_true_pos, y_pred_pos)
    recall_pos = recall_score(y_true_pos, y_pred_pos)
    f1_pos = f1_score(y_true_pos, y_pred_pos)

    # M√©tricas com Negativo como classe positiva
    y_true_neg = binary_df['expected_sentiment'].map({'Negativo': 1, 'Positivo': 0})
    y_pred_neg = binary_df['sentiment_class'].map({'Negativo': 1, 'Positivo': 0, 'Neutro': 0}).astype(int)

    precision_neg = precision_score(y_true_neg, y_pred_neg)
    recall_neg = recall_score(y_true_neg, y_pred_neg)
    f1_neg = f1_score(y_true_neg, y_pred_neg)

    # Criar cards mais visuais para as m√©tricas
    st.markdown("### Desempenho do Modelo")
    
    # Fun√ß√£o para determinar cor com base no valor da m√©trica
    def get_color(value):
        if value >= 0.8:
            return "green"
        elif value >= 0.6:
            return "orange"
        else:
            return "red"

    # Criar duas colunas para as m√©tricas
    col1, col2 = st.columns(2)
    
    # Coluna 1: M√©tricas para Positivo
    with col1:
        st.markdown("#### üòÉ Detec√ß√£o de Sentimentos Positivos")
        
        # Criar m√©tricas visuais
        metrics_html = f"""
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 10px;">
            <h5 style="margin:0; color: {get_color(precision_pos)};">Precision: {precision_pos:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Quando diz que √© positivo, acerta {precision_pos:.1%} das vezes</p>
        </div>
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 10px;">
            <h5 style="margin:0; color: {get_color(recall_pos)};">Recall: {recall_pos:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Detecta {recall_pos:.1%} dos sentimentos realmente positivos</p>
        </div>
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <h5 style="margin:0; color: {get_color(f1_pos)};">F1 Score: {f1_pos:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Equil√≠brio entre precis√£o e abrang√™ncia</p>
        </div>
        """
        st.markdown(metrics_html, unsafe_allow_html=True)
    
    # Coluna 2: M√©tricas para Negativo
    with col2:
        st.markdown("#### üòü Detec√ß√£o de Sentimentos Negativos")
        
        # Criar m√©tricas visuais
        metrics_html = f"""
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 10px;">
            <h5 style="margin:0; color: {get_color(precision_neg)};">Precision: {precision_neg:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Quando diz que √© negativo, acerta {precision_neg:.1%} das vezes</p>
        </div>
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 10px;">
            <h5 style="margin:0; color: {get_color(recall_neg)};">Recall: {recall_neg:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Detecta {recall_neg:.1%} dos sentimentos realmente negativos</p>
        </div>
        <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <h5 style="margin:0; color: {get_color(f1_neg)};">F1 Score: {f1_neg:.1%}</h5>
            <p style="margin:0; font-size: 0.8em;">Equil√≠brio entre precis√£o e abrang√™ncia</p>
        </div>
        """
        st.markdown(metrics_html, unsafe_allow_html=True)

    # Avalia√ß√£o geral do modelo
    avg_f1 = (f1_pos + f1_neg) / 2
    
    # Determinar a classifica√ß√£o do modelo
    if avg_f1 >= 0.8:
        model_rating = "Excelente"
        color = "green"
        emoji = "üåü"
    elif avg_f1 >= 0.7:
        model_rating = "Bom"
        color = "darkgreen"
        emoji = "‚úÖ"
    elif avg_f1 >= 0.6:
        model_rating = "Aceit√°vel"
        color = "orange"
        emoji = "‚ö†Ô∏è"
    else:
        model_rating = "Precisa melhorar"
        color = "red"
        emoji = "‚ùó"
    
    # Mostrar avalia√ß√£o geral
    st.markdown(f"""
    <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px; margin-top: 20px;">
        <h3 style="margin-top: 0; text-align: center; color: {color};">{emoji} Avalia√ß√£o Geral do Modelo: {model_rating}</h3>
        <p style="text-align: center;">F1 Score m√©dio: {avg_f1:.1%}</p>
    </div>
    """, unsafe_allow_html=True)

    # Adicionar dicas de uso dos resultados
    with st.expander("üí° Como usar estas informa√ß√µes"):
        st.markdown("""
        ### Como interpretar e usar estas m√©tricas:
        
        #### Se o modelo tem bom desempenho (F1 > 70%):
        - Voc√™ pode confiar nas an√°lises de sentimento para tomada de decis√µes
        - Use os insights dos temas para priorizar melhorias no produto
        
        #### Se o modelo tem desempenho m√©dio (F1 entre 60-70%):
        - Use a an√°lise como guia geral, mas verifique manualmente reviews cr√≠ticas
        - Concentre-se nas tend√™ncias gerais em vez de casos espec√≠ficos
        
        #### Se o modelo tem baixo desempenho (F1 < 60%):
        - Considere usar outro modelo de an√°lise de sentimento
        - Verifique se as reviews t√™m caracter√≠sticas que dificultam a an√°lise (sarcasmo, linguagem t√©cnica)
        
        #### Desequil√≠brio entre detec√ß√£o positiva e negativa:
        - Se o modelo √© melhor em detectar positivos: Pode estar perdendo problemas importantes
        - Se o modelo √© melhor em detectar negativos: Pode estar subestimando a satisfa√ß√£o dos clientes
        """)
    
    st.markdown("---")
